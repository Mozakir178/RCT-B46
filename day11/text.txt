

components -> props -> pass the data the components as arguments 

Parent -> data 
Child -> need data , we use pass data as props 

const data = [] ;
<Parent >

<Child data= {data}>
    // we can access data 
    <GrandChild data = {data}> 
    </GrandChild>
</Child>

<Child2>
</Child2>


</Parent> 

State uplifting 
when two or more child need same data, then instead of holding data in each components, we uplift the state  of the data to parent 



function Child({data}){
    // consume data as a props here 
}

prop drilling 
    context API: global context -> React


according to context API, we were holding the state globally, 
and every components can directly access this state using useContext 



Redux: it will also prevent the props drilling and store data globally 


a application -> you need to manage theme -> themeToggle functionality -> 1 context as ThemeContext 
-> auth -> AuthContext -> card -> CardContext 


Redux -> Does not matter how many state you need to manage -> all these state should manage through single sorce 
        -> single source of truth 
        a plane object holding all the data that need to be share through app 



you need to take care of 1 state only -> theme state -> context API -> smaller application 
as app grows then we should go for redux 


Redux: 
    store: a plain object containing all the data or state that need to be shared accross the application, you will never modify
          data or state directly inside store 
    action: this will a object that will let us know what is change we want to make 
    dispatch: it will take this changes to someone who will be responsible for making those changes 
    reducer: this will be responsible for making the changes in the store data 



    You ordered a Pizza
    kitchen (store)   {Pizza}

    You want to make some changes in the pizza -> Onion -> do not want ->  write down the changes you want make 
    { toppings without onion} -> action 
    call waiter -> give this instruction to him -> waiter will take this instructions to chef waiter (dispatch)
    chef will make changes in the pizza -> chef (reducer) 
    updated pizza will be availble in the kitch (store)



    

   
   redux -> 2008 
   react-redux -> it is implimenting in react 

create a counter app with the help of redux 

    count -> state 

    action: increase , decrease, reset 

    dispatch: will take above mentioned actions to the reducer

    reducer: it will be responsible for making changes in the actual count state 
